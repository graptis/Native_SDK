apply plugin: 'com.android.application'

def hasSigningDefined = project.hasProperty('KEYSTORE_FILE') &&  project.hasProperty('KEYSTORE_PASSWORD') &&  project.hasProperty('KEY_ALIAS') && project.hasProperty('KEY_PASSWORD')

android {
	compileSdkVersion 26
	defaultConfig {
		applicationId "com.powervr.VulkanDeferredShadingPFX"
		minSdkVersion 21
		targetSdkVersion 24
		externalNativeBuild {
			cmake {
				cppFlags "-fexceptions"
				arguments "-DANDROID_STL=c++_static"
			}
		}
		ndk
		{
			abiFilters "$ANDROID_ABI".replace(" ", "").split(",")
		}
	}
	
	if (!project.hasProperty('NOSIGN') && hasSigningDefined) {
		signingConfigs {
			release {
				storeFile file(project['KEYSTORE_FILE'])
				storePassword project['KEYSTORE_PASSWORD']
				keyAlias project['KEY_ALIAS']
				keyPassword project['KEY_PASSWORD']
			}
		}
	}

	buildTypes {
		release {
			minifyEnabled false
			proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
			zipAlignEnabled true
			if (!project.hasProperty('NOSIGN') && hasSigningDefined) {
				signingConfig signingConfigs.release
			}
		}

		debug {
			sourceSets {
				main {
					jniLibs {
						// We are providing prebuilt validation layer libraries built using the LunarG Vulkan-LoaderAndValidationLayers github repo: https://github.com/KhronosGroup/Vulkan-LoaderAndValidationLayers.git
						// We found that the latest set provided in the ndk were quite out of date (using VK_HEADER_VERSION 31) and were outputting false positive validation layer errors in certain cases.
						// The following makes use of our provided validation layer libraries:
						srcDir "${project.projectDir}/../../../../external/validation_layers/jniLibs"
						
						// The following will instead make use of the prebuilt validation layer libraries provided in the ndk:
						// def ndkDir = android.ndkDirectory
						// srcDir "$ndkDir/sources/third_party/vulkan/src/build-android/jniLibs"
					}
				}
			}
		}

	}
	externalNativeBuild {
		cmake {
			path "../CMakeLists.txt"
		}
	}

///// TASK TO COPY ASSETS ///
//Copy all our asset files into the android assets folder.
//Add to this list files that will need to be read at runtime here: Textures, shaders, text files etc.
FileCollection assetFiles = files(
"${project.projectDir}/../../../assets/Satyr/Marble.pvr",
"${project.projectDir}/../../../assets/Satyr/MarbleNormalMap.pvr",
"${project.projectDir}/../../../assets/Satyr/Table.pvr",
"${project.projectDir}/../AttributelessVertexShader.vsh.spv",
"${project.projectDir}/../GBufferFragmentShader.fsh.spv",
"${project.projectDir}/../GBufferVertexShader.vsh.spv",
"${project.projectDir}/../GBufferFloorFragmentShader.fsh.spv",
"${project.projectDir}/../GBufferFloorVertexShader.vsh.spv",
"${project.projectDir}/../DirectionalLightFragmentShader.fsh.spv",
"${project.projectDir}/../PointLightPass1FragmentShader.fsh.spv",
"${project.projectDir}/../PointLightPass1VertexShader.vsh.spv",
"${project.projectDir}/../PointLightPass2FragmentShader.fsh.spv",
"${project.projectDir}/../PointLightPass2VertexShader.vsh.spv",
"${project.projectDir}/../PointLightPass3FragmentShader.fsh.spv",
"${project.projectDir}/../PointLightPass3VertexShader.vsh.spv",
"${project.projectDir}/../AttributelessVertexShader.vsh",
"${project.projectDir}/../GBufferFragmentShader.fsh",
"${project.projectDir}/../GBufferVertexShader.vsh",
"${project.projectDir}/../GBufferFloorFragmentShader.fsh",
"${project.projectDir}/../GBufferFloorVertexShader.vsh",
"${project.projectDir}/../DirectionalLightFragmentShader.fsh",
"${project.projectDir}/../PointLightPass1FragmentShader.fsh",
"${project.projectDir}/../PointLightPass1VertexShader.vsh",
"${project.projectDir}/../PointLightPass2FragmentShader.fsh",
"${project.projectDir}/../PointLightPass2VertexShader.vsh",
"${project.projectDir}/../PointLightPass3FragmentShader.fsh",
"${project.projectDir}/../PointLightPass3VertexShader.vsh",
"${project.projectDir}/../recompile.sh",
"${project.projectDir}/../recompile.bat",
"${project.projectDir}/../../../assets/Satyr/SatyrAndTable.pod",
"${project.projectDir}/../../../assets/Satyr/pointlight.pod",
"${project.projectDir}/../effect_MRT_PFX3.pfx",

)
	//Runs before ndk building tasks
	task copyAssets(type: Copy) {
		from assetFiles
		into sourceSets.main.assets.srcDirs[0]
		fileMode = 0664
	}
	//Runs before ndk building tasks
	task copyIcons(type: Copy) {
		from file("${project.projectDir}/../../../../res/Android/Vulkan")
		into sourceSets.main.res.srcDirs[0]
		fileMode = 0664
	}
	preBuild.dependsOn copyAssets
	preBuild.dependsOn copyIcons
	
	clean {
		doLast() { delete "bin" }
	}
}

def framework_projects = ["PVRCore", "PVRAssets", "PVRVk", "PVRShell", "PVRUtilsVk"]

dependencies {
	implementation fileTree(dir: 'libs', include: ['*.jar'])
	if (!project.hasProperty('NO_FRAMEWORK_BUILD'))
	{// Add the dependencies to the framework to guarantee build order. If the framework is prebuilt, this is not necessary
		framework_projects.each { s-> implementation project(":${s}")}
	}
}

buildscript {
	repositories {
		google()
		jcenter()
	}
	dependencies {
		classpath 'com.android.tools.build:gradle:3.0.0'
	}
}

task checkReleaseSigning() {
	doLast{
		if (!hasSigningDefined && !project.hasProperty('NOSIGN')) {
			throw new InvalidUserDataException("*** ERROR *** No signing parameters and no 'NOSIGN' parameter for *Release* build *** ERROR ***\n"+
	"You must pass the parameters 'KEYSTORE_FILE', 'KEYSTORE_PASSWORD', 'KEY_ALIAS' and 'KEY_PASSWORD', or 'NOSIGN'.\n"+
	"These parameters can be passed several ways:\n" +
	" - Via command line ('-PRELEASE_STORE_FILE=myfile.jks....'), \n" +
	" - Defined locally in the build.gradle or settings.gradle (ext['KEYSTORE_FILE'] ='myfile.jks'. \n"+
	" - Defined globally in a gradle.properties file (ensure you have the GRADLE_USER_HOME variable set) : (KEYSTORE_FILE=myfile.jks etc.).\n"+
	'Otherwise, execute a *Debug* build, or pass the parameter NOSIGN. Otherwise, hardcode or disable signing completely by changing/removing the \'signingConfigs\' section and the line \'signingConfig signingConfigs.release\' from the \'buildTypes { release { ... } }\' section.');
		}
	}
}

def binOutput = hasProperty('BUILD_ENTIRE_SDK') ? '../../../../build-android/bin' : 'bin'

//Copy outputs to the bin/ folder
task copyToBinDebug(type: Copy) {
	from 'build/outputs/apk/debug'
	into "${binOutput}"
	include('*.apk')
}
task copyToBinRelease(type: Copy) {
	from 'build/outputs/apk/release'
	into "${binOutput}"
	include('*.apk')
	rename('(.*)-release.apk', '$1.apk')
}

tasks.whenTaskAdded { task -> 	
	// Workaround library native code dependency issue in gradle 3.0.0.
	// This should normally be handled by the dependencies above: (implementation project(':...'))
	// refer to https://issuetracker.google.com/issues/69616088  . If these lines are removed, the framework is not built as it should be.
	if (!project.hasProperty('NO_FRAMEWORK_BUILD'))
	{
		if (task.name == 'externalNativeBuildRelease') {
			framework_projects.each {s -> task.dependsOn ":${s}:externalNativeBuildRelease" }
		} else if (task.name == 'externalNativeBuildDebug') {
			framework_projects.each {s -> task.dependsOn ":${s}:externalNativeBuildDebug" }
		}
	}
	
	//... Copy the binary to the final bin folder.
	if (task.name == 'packageRelease') {
		task.dependsOn(checkReleaseSigning)
		task.doFirst() { delete fileTree('bin') { include {'*.apk'} exclude {'*-debug.apk'} } }
		task.doLast() { copyToBinRelease.execute() }
	}
	if (task.name == 'packageDebug') {
		task.doFirst() { delete fileTree('bin') { include '*-debug.apk'} }
		task.doLast() { copyToBinDebug.execute() }
	}
}
repositories {
	google()
}